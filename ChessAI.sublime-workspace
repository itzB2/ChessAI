{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"en",
				"endDirIndex\tint ⟠"
			],
			[
				"start",
				"startDirIndex\tint ⟠"
			],
			[
				"piece",
				"pieceOnTargetSquare\tstr ⟠"
			],
			[
				"pie",
				"pieceOnTargetSquare\tstr ⟠"
			],
			[
				"st",
				"startSquare\tint ⟠"
			],
			[
				"num",
				"numEast\tint ⟠"
			],
			[
				"min",
				"min(…)\tfunction ⟠"
			],
			[
				"nu",
				"numWest\tint ⟠"
			],
			[
				"se",
				"selectedPiece\tstatement"
			],
			[
				"dr",
				"drawSquare(…)\tfunction ⟠"
			],
			[
				"d",
				"drawSquare(…)\tfunction ⟠"
			],
			[
				"sta",
				"startPos\tint ⟠"
			],
			[
				"p",
				"pType\t⟠"
			],
			[
				"sq",
				"squares\tint | list ⟠"
			],
			[
				"get",
				"get_pressed()\tfunction ⟠"
			],
			[
				"gte",
				"get_pressed()\tfunction ⟠"
			],
			[
				"type",
				"typeLookup\tdict ⟠"
			],
			[
				"is",
				"isLightSquare\tbool ⟠"
			],
			[
				"init",
				"init()\tfunction ⟠"
			],
			[
				"K",
				"King\tint ⟠"
			],
			[
				"impor",
				"import Enum\t1★ pro ⟠"
			],
			[
				"5",
				"50\t⟠"
			],
			[
				"size",
				"sizeY\t⟠"
			],
			[
				"cone",
				"convert_alpha(…)\tfunction ⟠"
			],
			[
				"seg",
				"Seg()\tfunction ⟠"
			],
			[
				"medi",
				"media_path_vid\tstr ⟠"
			],
			[
				"me",
				"media_path_pic\tstr ⟠"
			],
			[
				"fi",
				"file_list\tlist ⟠"
			],
			[
				"vids",
				"vids.append\t1★ pro ⟠"
			],
			[
				"no",
				"normValues\tlist ⟠"
			],
			[
				"n",
				"normValues\tstatement"
			],
			[
				"exp",
				"expValues\tlist ⟠"
			],
			[
				"green",
				"GREEN\tstr ⟠"
			],
			[
				"raise",
				"raise ValueError\t3★ pro ⟠"
			],
			[
				"t",
				"typeofC\t⟠"
			],
			[
				"tr",
				"transistors\tint ⟠"
			],
			[
				"com",
				"Components\tstatement"
			],
			[
				"co",
				"components\tdict ⟠"
			],
			[
				"Order",
				"order\tdict ⟠"
			],
			[
				"C",
				"Componenet"
			],
			[
				"Co",
				"ComponentMode()\tfunction ⟠"
			],
			[
				"trn",
				"transistorMode\tfunction"
			],
			[
				"si",
				"Simulation\tclass"
			],
			[
				"Sim",
				"simulation\tmodule ⟠"
			],
			[
				"compo",
				"ComponenetName\tstatement"
			],
			[
				"lo",
				"logicWindoe\t⟠"
			],
			[
				"Logi",
				"LogicWindow\tmodule"
			],
			[
				"Com",
				"Components\tstatement"
			],
			[
				"Tra",
				"transistors"
			],
			[
				"add",
				"addComponent(…)\tfunction ⟠"
			],
			[
				"uin",
				"uint16_t"
			],
			[
				"str",
				"string.h\t⟠"
			],
			[
				"mem",
				"memory.h\t⟠"
			],
			[
				"priv",
				"private:\t⟠"
			],
			[
				"opcode",
				"opcodeName"
			],
			[
				"Arg",
				"Arg2〔variable〕"
			],
			[
				"Ar",
				"Arg2〔variable〕"
			],
			[
				"A",
				"Arg1"
			],
			[
				"de",
				"decodedOpcode"
			],
			[
				"opc",
				"opcodeName〔variable〕"
			],
			[
				"he",
				"hex〔function〕"
			],
			[
				"op",
				"opcodeName〔variable〕"
			],
			[
				"Render",
				"RenderWindow"
			],
			[
				"p_",
				"p_title"
			],
			[
				"io",
				"iostream\tstandard header"
			],
			[
				"l",
				"lSDL2"
			],
			[
				"scr",
				"scroll_y〔variable〕"
			],
			[
				"mou",
				"mouseLocation〔variable〕"
			],
			[
				"py",
				"pygame.mouse.get_pos"
			],
			[
				"pygame",
				"pygame.mouse.get_pressed"
			],
			[
				"wid",
				"widget"
			],
			[
				"widgt",
				"widget"
			],
			[
				"widgte",
				"widgets"
			],
			[
				"widget",
				"widgets"
			],
			[
				"c",
				"cKl"
			],
			[
				"ret",
				"return"
			],
			[
				"data",
				"dataType〔variable〕"
			],
			[
				"dat",
				"dataType〔variable〕"
			],
			[
				"try",
				"try\tTry/Except/Finally"
			],
			[
				"float",
				"floatInt〔variable〕"
			],
			[
				"int",
				"integer〔variable〕"
			],
			[
				"func",
				"function〔variable〕"
			],
			[
				"run",
				"runtime〔variable〕"
			],
			[
				"runt",
				"runtimeFunctions〔variable〕"
			],
			[
				"V",
				"VarVal"
			],
			[
				"funct",
				"functionList〔variable〕"
			],
			[
				"Func",
				"Function"
			],
			[
				"Var",
				"VarName〔variable〕"
			],
			[
				"Va",
				"VarVal〔variable〕"
			],
			[
				"AR",
				"Arg0"
			],
			[
				"ke",
				"keyword〔variable〕"
			],
			[
				"fun",
				"functionName〔variable〕"
			],
			[
				"splt",
				"split"
			],
			[
				"Text",
				"Textbox"
			],
			[
				"du",
				"dumps〔function〕"
			],
			[
				"in",
				"inputText〔variable〕"
			],
			[
				"_",
				"_Widget"
			],
			[
				"pro",
				"property"
			],
			[
				"Op",
				"OpenFile"
			],
			[
				"New",
				"NewFile"
			],
			[
				"if",
				"ifmain\tif __name__ == '__main__'"
			],
			[
				"F",
				"FontSize"
			],
			[
				"fotn",
				"fontSize〔variable〕"
			],
			[
				"Key",
				"KeyString〔variable〕"
			],
			[
				"o",
				"outputString"
			],
			[
				"De",
				"DecoderOrderGenerator〔function〕"
			],
			[
				"index",
				"index_list〔variable〕"
			],
			[
				"a",
				"addBlock〔function〕"
			],
			[
				"tex",
				"textureName"
			],
			[
				"te",
				"textureName"
			],
			[
				"text",
				"textureFiles"
			],
			[
				"off",
				"offsetY"
			],
			[
				"ch",
				"chunkSeed"
			],
			[
				"chu",
				"chunkSize"
			],
			[
				"noi",
				"noiseVal"
			],
			[
				"ra",
				"randint〔module〕"
			],
			[
				"see",
				"seedNumber〔variable〕"
			],
			[
				"demo",
				"demo_der〔class〕"
			],
			[
				"P",
				"PokemonNumber"
			],
			[
				"path",
				"pathImage〔variable〕"
			],
			[
				"Ab",
				"Abilities"
			],
			[
				"Fu",
				"FullData〔variable〕"
			],
			[
				"D",
				"DownloadImage"
			],
			[
				"Name",
				"NameList〔variable〕"
			],
			[
				"pat",
				"pathImage"
			],
			[
				"gen",
				"genderRatio"
			],
			[
				"ID",
				"ID2"
			],
			[
				"Abili",
				"Ability"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#Libraries\nimport pygame as pg\nimport os\n\np = {\"White King\":pg.image.load(os.path.join(\"Sprites\", \"White King.png\")).convert_alpha(),\n\t \"White Queen\":pg.image.load(os.path.join(\"Sprites\", \"White Queen.png\")).convert_alpha(),\n\t \"White Bishop\":pg.image.load(os.path.join(\"Sprites\", \"White Bishop.png\")).convert_alpha(),\n\t \"White Knight\":pg.image.load(os.path.join(\"Sprites\", \"White Knight.png\")).convert_alpha(),\n\t \"White Rook\":pg.image.load(os.path.join(\"Sprites\", \"White Rook.png\")).convert_alpha(),\n\t \"White Pawn\":pg.image.load(os.path.join(\"Sprites\", \"White Pawn.png\")).convert_alpha(),\n\t \"Black King\":pg.image.load(os.path.join(\"Sprites\", \"Black King.png\")).convert_alpha(),\n\t \"Black Queen\":pg.image.load(os.path.join(\"Sprites\", \"Black Queen.png\")).convert_alpha(),\n\t \"Black Bishop\":pg.image.load(os.path.join(\"Sprites\", \"Black Bishop.png\")).convert_alpha(),\n\t \"Black Knight\":pg.image.load(os.path.join(\"Sprites\", \"Black Knight.png\")).convert_alpha(),\n\t \"Black Rook\":pg.image.load(os.path.join(\"Sprites\", \"Black Rook.png\")).convert_alpha(),\n\t \"Black Pawn\":pg.image.load(os.path.join(\"Sprites\", \"Black Pawn.png\")).convert_alpha(),\n\t \"Blank\":pg.image.load(os.path.join(\"Sprites\", \"blank.png\")).convert_alpha()\n\t}\n\nclass Piece:\n\tdef __init__(self, color, pType):\n\t\tkey = \"\"\n\n\t\tself.color = color\n\t\tself.type = pType\n\t\tself.isSlidingPiece = True if pType == \"Queen\" or pType == \"Rook\" or pType == \"Bishop\" else False\n\n\t\tif color == \"White\":\n\t\t\tkey = key+\"White \"\n\t\telif color == \"Black\":\n\t\t\tkey = key+\"Black \"\n\n\t\tif pType == \"King\":\n\t\t\tkey = key+\"King\"\n\t\telif pType == \"Queen\":\n\t\t\tkey = key+\"Queen\"\n\t\telif pType == \"Bishop\":\n\t\t\tkey = key+\"Bishop\"\n\t\telif pType == \"Knight\":\n\t\t\tkey = key+\"Knight\"\n\t\telif pType == \"Rook\":\n\t\t\tkey = key+\"Rook\"\n\t\telif pType == \"Pawn\":\n\t\t\tkey = key+\"Pawn\"\n\n\t\tif color == \"\" and pType == \"\":\n\t\t\tkey = \"Blank\"\n\n\t\tself.key = key\n\t\tself.sprite = p[key]\n",
			"file": "pieces.py",
			"file_size": 1925,
			"file_write_time": 132587375771415272,
			"settings":
			{
				"buffer_size": 1875,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "from pieces import Piece\n\nclass Fen():\n\tdef __init__(self, fen):\n\t\tself.pieces = [[Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\")], \n\t\t\t\t\t   [Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\")], \n\t\t\t\t\t   [Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\")], \n\t\t\t\t\t   [Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\")], \n\t\t\t\t\t   [Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\")], \n\t\t\t\t\t   [Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\")], \n\t\t\t\t\t   [Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\")], \n\t\t\t\t\t   [Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\"), Piece(\"\",\"\")]]\n\t\ttypeLookup = {'k':\"King\",'p':\"Pawn\",'n':\"Knight\",'b':\"Bishop\",'r':\"Rook\",'q':\"Queen\"}\n\t\tfenBoard = fen.split(\" \")[0]\n\t\tfile = 0\n\t\trank = 7\n\n\t\tfor char in fenBoard:\n\t\t\tif char ==\"/\":\n\t\t\t\tfile = 0\n\t\t\t\trank -=1\n\t\t\telse:\n\t\t\t\tif char.isdigit():\n\t\t\t\t\tfile += int(char)\n\t\t\t\telse:\n\t\t\t\t\tpieceColor = \"White\" if char.isupper() else \"Black\"\n\t\t\t\t\tpieceType = typeLookup[char.lower()]\n\t\t\t\t\tself.pieces[file][rank] = Piece(pieceColor, pieceType)\n\t\t\t\t\tfile+=1\n",
			"file": "utils/fen.py",
			"file_size": 1533,
			"file_write_time": 132587381892463291,
			"settings":
			{
				"buffer_size": 1504,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#Libraries\nimport pygame\n\n#Own Modules\nfrom pieces import Piece\nfrom utils.fen import Fen\n\nclass Move:\n\tdef __init__(self, ss, ts):\n\t\tself.StartSquare = int(ss)\n\t\tself.TargetSquare = int(ts)\n\nclass Board:\n\tdef __init__(self, size, darkCol, lightCol, slectedCol, fen = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"):\n\t\tself.surface = pygame.Surface((size,size))\n\t\tself.squares = [[{'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}], \n\t\t\t\t\t\t [{'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False},\n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}], \n\t\t\t\t\t\t [{'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}], \n\t\t\t\t\t\t [{'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}], \n\t\t\t\t\t\t [{'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}], \n\t\t\t\t\t\t [{'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}], \n\t\t\t\t\t\t [{'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}], \n\t\t\t\t\t\t [{'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}, \n\t\t\t\t\t\t {'color': '', 'piece': '', 'selected': False}]]\n\t\tself.sqSize = size/8\n\t\tself.drawSquares(lightCol, darkCol)\n\t\tself.currentfen = fen\n\t\tself.slectedCol = slectedCol\n\t\tself.lightCol = lightCol\n\t\tself.darkCol = darkCol\n\t\tself.canSelect = True\n\t\tself.ColourToMove = \"White\"\n\n\tdef drawSquares(self, lightCol, darkCol):\n\t\tfile = 0\n\t\twhile file<8:\n\t\t\trank = 0\n\t\t\twhile rank<8:\n\t\t\t\tisLightSquare = (file + rank) % 2 != 0\n\n\t\t\t\tsquareColor = lightCol if isLightSquare else darkCol\n\t\t\t\tposition = (file*self.sqSize, rank*self.sqSize)\n\t\t\t\tself.squares[file][rank][\"color\"] = squareColor\n\t\t\t\tpygame.draw.rect(self.surface, self.squares[file][rank][\"color\"], pygame.Rect(position[0],position[1],self.sqSize,self.sqSize)) \n\t\t\t\trank+=1\n\t\t\tfile+=1\n\n\tdef drawPieces(self):\n\t\tpieces = Fen(self.currentfen).pieces\n\t\tfile = 0\n\t\twhile file<8:\n\t\t\trank = 0\n\t\t\twhile rank<8:\n\t\t\t\tself.squares[file][rank][\"piece\"] = pieces[file][rank]\n\t\t\t\tsprite = pieces[file][rank].sprite\n\t\t\t\tsprite = pygame.transform.smoothscale(sprite, (int(self.sqSize),int(self.sqSize)))\n\t\t\t\tpos = (int(file*self.sqSize), int(rank*self.sqSize))\n\t\t\t\tself.surface.blit(sprite, pos)\n\t\t\t\trank+=1\n\t\t\tfile+=1\n\n\tdef getSquare(self, mPos):\n\t\tsquare = [0,0]\n\t\tfile = 0\n\t\twhile file<8:\n\t\t\tstartPos = int(file*self.sqSize)\n\t\t\tendPos = int((file+1)*self.sqSize)\n\t\t\t# print(file, startPos, endPos, mPos[1])\n\t\t\tif mPos[0] <= endPos and mPos[0] >= startPos:\n\t\t\t\tsquare[0] = file\n\t\t\t\tbreak\n\t\t\tfile+=1\n\t\trank = 0\n\t\twhile rank<8:\n\t\t\tstartPos = int(rank*self.sqSize)\n\t\t\tendPos = int((rank+1)*self.sqSize)\n\t\t\t# print(file, startPos, endPos, mPos[0])\n\t\t\tif mPos[1] <= endPos and mPos[1] >= startPos:\n\t\t\t\tsquare[1] = rank\n\t\t\t\tbreak\n\t\t\trank+=1\n\t\treturn square\n\n\tdef selectSquare(self, mPos):\n\t\tindex = self.getSquare(mPos)\n\t\tisLightSquare = (index[0] + index[1]) % 2 != 0\n\t\tsquareColor = self.lightCol if isLightSquare else self.darkCol\n\n\t\tif self.canSelect == True and self.squares[index[0]][index[1]][\"selected\"] == False:\n\n\t\t\tself.squares[index[0]][index[1]][\"selected\"] = True\n\t\t\tself.drawSquare(index,self.slectedCol)\n\t\t\tself.canSelect = False\n\t\telif self.canSelect == False and self.squares[index[0]][index[1]][\"selected\"] == True:\n\n\t\t\tself.squares[index[0]][index[1]][\"selected\"] = False\n\t\t\tself.drawSquare(index, squareColor)\n\t\t\tself.canSelect = True\n\n\t\tif self.squares[index[0]][index[1]][\"selected\"] == True and self.squares[index[0]][index[1]][\"piece\"].key != \"Blank\":\n\t\t\tselectedPiece = self.squares[index[0]][index[1]][\"piece\"].key\n\t\t\tprint(f\"{selectedPiece} is selected\")\n\t\t\tprint(self.squares[index[0]][index[1]][\"piece\"].isSlidingPiece)\n\t\t\tself.movePiece(index)\n\n\tdef drawSquare(self, index, col):\n\t\tposition = (index[0]*self.sqSize, index[1]*self.sqSize)\n\t\tpygame.draw.rect(self.surface, col, pygame.Rect(position[0],position[1],self.sqSize,self.sqSize)) \n\n\tdef movePiece(self, index):\n\t\tpiece = self.squares[index[0]][index[1]][\"piece\"]\n\n\tdef draw(self,surface):\n\t\tself.drawPieces()\n\t\tsurface.blit(self.surface, (0,0))\n\n",
			"file": "board.py",
			"file_size": 7004,
			"file_write_time": 132587384607498320,
			"settings":
			{
				"buffer_size": 6833,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/F/4 Beethu/RoughNotes/RoughNoteChess.py",
			"settings":
			{
				"buffer_size": 26,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#Libraries\nimport pygame\n\npygame.init()\n\nDISPLAY = pygame.display.set_mode((720,720))\n\n#Own Modules\nfrom board import Board\nfrom utils.fen import Fen\n\nsize = DISPLAY.get_width()\ndC = (255, 137, 94)\nlC = (200,200,200)\nsC = (247, 58, 45)\nvC = ()\n\nboard = Board(size,dC,lC,sC)\n\nrunning = False\nwhile not running:\n\tfor event in pygame.event.get():\n\t\tif event.type == pygame.QUIT:\n\t\t\trunning = True\n\t\telif event.type == pygame.MOUSEBUTTONDOWN:\n\t\t\tmPos = pygame.mouse.get_pos()\n\t\t\tif pygame.mouse.get_pressed()[0] == 1:\n\t\t\t\tboard.selectSquare(mPos)\n\t\t\telif pygame.mouse.get_pressed()[1] == 1:\n\t\t\t\t#MIDDLE\n\t\t\t\tpass\n\t\t\telif pygame.mouse.get_pressed()[2] == 1:\n\t\t\t\t#RMB\n\t\t\t\tpass\n\n\tboard.draw(DISPLAY)\n\tpygame.display.update()",
			"file": "main.py",
			"file_size": 752,
			"file_write_time": 132587493602348935,
			"settings":
			{
				"buffer_size": 716,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ip",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"git",
				"Git: Merge"
			],
			[
				"Remove",
				"Package Control: Remove Package"
			],
			[
				"Git",
				"Git: Init"
			],
			[
				"Git: Init",
				"Git: Init"
			],
			[
				"package re",
				"PackageResourceViewer: Open Resource"
			],
			[
				"re",
				"Package Control: Remove Package"
			],
			[
				"er",
				"Emmet: Remove Tag"
			],
			[
				"LiveReload: Enable/disable plugins",
				"LiveReload: Enable/disable plug-ins"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 158.0,
		"history":
		[
			"view.run_command('example')"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/F/4 Beethu/ChessAI/.git/COMMIT_EDITMSG",
		"/F/4 Beethu/ChessAI/LICENSE",
		"/F/4 Beethu/ChessAI/board.py",
		"/F/4 Beethu/RoughNotes/RoughNoteChess.py",
		"/F/4 Beethu/ChessAI/utils/fen.py",
		"/F/4 Beethu/RoughNotecHESS.py",
		"/F/4 Beethu/ChessAI/utils/sprites.py",
		"/F/4 Beethu/ChessAI/ChessAI.sublime-project",
		"/C/Program Files/Adobe/Adobe Premiere Pro 2020/Settings/SequencePresets/HDV/HDV 720p24.sqpreset",
		"/F/03 Joab/virus/zransomeware.py",
		"/D/My Office/02 Sunday School/Online Sunday School/1 UG Online SS/programs/SAM.py",
		"/D/My Office/02 Sunday School/Online Sunday School/1 UG Online SS/programs/vids",
		"/D/My Office/02 Sunday School/Online Sunday School/1 UG Online SS/031_14 Feb 2021/031E Kids Response/C Images/jpgtobpm.py",
		"/D/My Office/02 Sunday School/Online Sunday School/1 UG Online SS/032_21 Feb 2021/031E Kids Response/Whole Zip/SAM.py",
		"/F/03 Joab/Minecraft/Minecraft/Minecraft 5 (Chunks and Swimming).pyw",
		"/F/4 Beethu/Logix/.git/COMMIT_EDITMSG",
		"/F/4 Beethu/Logix/LogicGates/AND.json",
		"/F/4 Beethu/Logix/LogicGates/NOR.json",
		"/F/4 Beethu/Logix/LogicGates/NAND.json",
		"/F/4 Beethu/Logix/LogicGates/XNOR.json",
		"/F/4 Beethu/Logix/LogicGates/OR.json",
		"/F/4 Beethu/Logix/LogicGates/NOT.json",
		"/F/4 Beethu/Logix/LogicGates/XOR.json",
		"/F/4 Beethu/Logix/.gitignore",
		"/F/4 Beethu/Logix/main.py",
		"/F/4 Beethu/Logix/push.sh",
		"/F/4 Beethu/Logix/Window.py",
		"/C/Users/admin/AppData/Roaming/Sublime Text 3/Packages/User/GitLime.py",
		"/C/Users/admin/AppData/Roaming/Sublime Text 3/Packages/SublimeGit/Default.sublime-keymap",
		"/C/Users/admin/AppData/Roaming/Sublime Merge/Packages/User/Preferences.sublime-settings",
		"/C/Users/admin/AppData/Roaming/Sublime Text 3/Packages/SideBarEnhancements/Side Bar.sublime-settings",
		"/C/Users/admin/AppData/Roaming/Sublime Text 3/Packages/Git/Git.sublime-settings",
		"/F/Emulator/CPP/GB&GBC/Code/GameBoy.sublime-project",
		"/F/Emulator/CPP/GB&GBC/Game Boy Boot ROM Disassembly",
		"/F/Emulator/CPP/GB&GBC/Code/src/ppu.cpp",
		"/F/Emulator/CPP/GB&GBC/Code/src/display.cpp",
		"/F/Emulator/CPP/GB&GBC/Code/include/ppu.hpp",
		"/F/Emulator/CPP/GB&GBC/Code/include/display.hpp",
		"/F/Emulator/CPP/GB&GBC/cpu.cpp",
		"/F/Emulator/CPP/GB&GBC/cpu.h",
		"/C/Users/George/Documents/try.py",
		"/F/SDL/Tutorial/tutorial.sublime-project",
		"/F/SDL/test.py",
		"/F/Devs Dos/Sublime Text/Data/Packages/Default/exec.py",
		"/F/Python Projects/Pixel Editor/zoomLengths.json",
		"/F/Python Projects/Pixel Editor/RoughNote.py",
		"/F/Algorithms/dictionary.py",
		"/F/Python Projects/Mesh Generation with python and perlin noise/HeightMap.py",
		"/F/Python Projects/Python Minecraft Ursina/main.py",
		"/C/Users/George/AppData/Roaming/.minecraft/webcache/Cache/f_000004",
		"/F/Python Projects/RoughNotes/TextEditorRoughNote.py",
		"/C/Users/George/Procedural",
		"/C/Users/George/Procedural Terrain Generaion/Terrain",
		"/C/Users/George/Procedural Terrain Generaion/Generaion/Assets/Scripts/Noise.cs",
		"/C/Users/George/Procedural Terrain Generaion/ProceduralTerrainGeneration.sublime-project",
		"/F/Python Minecraft Ursina/main.py",
		"/C/Users/George/Pictures/10.py",
		"/F/decode.json",
		"/F/Joab's crappy encrytion.py",
		"/C/Users/George/Pictures/secret_msg_decoder_and_encoder.py",
		"/F/Python Minecraft/Testing/Block.py",
		"/F/Python Minecraft/BlockData.py",
		"/F/Python Minecraft/Faithful/pack.mcmeta",
		"/F/Python Minecraft/openPGM.py",
		"/F/socketswifipy.py",
		"/F/Randomizer/loot_tables/blocks/acacia_button.json",
		"/C/Users/George/Pictures/test.py",
		"/C/Users/George/AppData/Roaming/.minecraft/launcher_profiles.json",
		"/C/Users/George/AppData/Roaming/.minecraft/launcher_accounts.json",
		"/C/Users/George/Documents/Pokedex/PokemonNames.txt",
		"/C/Users/George/Documents/Pokedex/Data/Pokemon/Bayleef.json",
		"/C/Users/George/Documents/Pokedex/Data/Pokemon/Bastiodon.json",
		"/C/Users/George/Documents/Pokedex/Data/Pokemon/Data.json",
		"/F/Pokedex/HTML Dat/sample.html",
		"/F/Pokedex/HTML Dat/bData.txt",
		"/F/roughNote.py",
		"/F/Pokedex/DataExtract.py",
		"/F/Pokedex/TypeEffectiveness.json",
		"/F/Pokedex/HTML_Analyze.py",
		"/F/Pokedex/PokemonNames.txt",
		"/F/image text/whatsapp automation.py",
		"//DESKTOP-O9MKOTI/4 Beethu/Fin/1/CHIP8.py",
		"/F/CHIP-8/CHIP8.py",
		"/F/Chip8Python-master/chip8/cpu.py",
		"/F/Emulator/Python/CHIP-8/BlinkingBox.ch8",
		"/F/AOC/Day3.input",
		"/F/AOC/Day3.py",
		"/F/AOC/Day2.input",
		"/F/AOC/Day1.py",
		"/F/AOC/Day2.py",
		"/F/AOC/Day1.input",
		"/F/Discord Bot/RoughNote.py",
		"/F/sockets/server.py",
		"/F/sockets/UserInfo.txt",
		"/F/sockets/test.py",
		"/F/sockets/client.py",
		"/F/Public socket/client.py",
		"/F/Projects/RPS/comms.py",
		"/F/Projects/RPS/script.py",
		"/F/Projects/RPS/project.py",
		"/F/Projects/RPS/MAIN.RPS",
		"/F/Projects/RPS/main.py",
		"/F/Projects/RPS/conf/onORoff.yaml",
		"/F/Projects/RPS/utils.py",
		"/F/Projects/RPS/conf/COMMS.yaml",
		"/F/Projects/RPS/TEST_01/config.yaml",
		"/F/Projects/RPS/config.py",
		"/F/Projects/RPS/projects.py",
		"/F/Projects/RPS/parser.py",
		"/F/Projects/RPS/eval.py",
		"/F/Projects/RPS/exec.py",
		"/F/Projects/RPS/TEST_01/main.rps",
		"/F/Discord Bot/roles.json",
		"/F/Discord Bot/spyfall.py",
		"/C/Users/George/Music/Tag.py",
		"/C/Users/George/Music/newtry.py",
		"/C/Users/George/Music/utils.py",
		"/C/Users/George/Music/Data.txt",
		"/C/Users/George/Music/index.html",
		"/C/Users/George/Music/utils.y",
		"//DESKTOP-O9MKOTI/internship/newtry.py",
		"/F/JB Intern/UncleGeorge/index.html",
		"/F/JB Intern/newtry.py",
		"/F/pyjunk/just html.py",
		"/F/JB Intern/widgets/HelloWorld/html.html",
		"/F/Emulator/Python/CHIP-8/Debug.txt",
		"/F/Emulator/CPP/CHIP-8/main.cpp",
		"/F/Emulator/CHIP-8/main.py"
	],
	"find":
	{
		"height": 32.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"#",
			"sC",
			"qqqqqqqq",
			"QQQQQQQQ",
			"qqqqqqqq",
			"ppppppppp",
			"file",
			"column",
			"directionIndex",
			"Bishop",
			"GenerateSlidingMoves",
			"piece",
			"Porn",
			"''",
			"canSelect",
			"darkCol",
			"col",
			"rank",
			"file",
			"rank",
			"file",
			"Blank",
			"1",
			"810",
			"720",
			"810",
			"file",
			"rank",
			"file",
			"pType",
			"pieces",
			"row",
			"file",
			"rank",
			"King",
			"60",
			"color",
			"squareColor",
			"\t\t\t\t\n",
			"color",
			"file",
			"lC",
			"1007200",
			"720",
			"1280",
			"1000",
			"open_svgstring_as_image",
			"    ",
			"crashed",
			"Pawn",
			"Values",
			"Rook",
			"Values",
			"Knight",
			"Values",
			"Knight",
			"Bishop",
			"Values",
			"Queen",
			"Values",
			"King",
			"color",
			"get_height",
			"Black",
			"Queen",
			"King",
			"Queen"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": true,
		"regex": false,
		"replace_history":
		[
			"",
			"Piece(\"\",\"\")",
			"print",
			"/t",
			"\\t",
			"/t",
			"running"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pieces.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1875,
						"regions":
						{
						},
						"selection":
						[
							[
								1315,
								1315
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 276.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "utils/fen.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1504,
						"regions":
						{
						},
						"selection":
						[
							[
								1452,
								1452
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "board.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6833,
						"regions":
						{
						},
						"selection":
						[
							[
								6749,
								6749
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1932.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/F/4 Beethu/RoughNotes/RoughNoteChess.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26,
						"regions":
						{
						},
						"selection":
						[
							[
								26,
								26
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 716,
						"regions":
						{
						},
						"selection":
						[
							[
								586,
								586
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 414.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 84.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 190.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 318.0
	},
	"output.git-commit":
	{
		"height": 151.0
	},
	"output.git-init":
	{
		"height": 151.0
	},
	"output.git-push":
	{
		"height": 151.0
	},
	"output.git-remote":
	{
		"height": 151.0
	},
	"output.stino_build_panel":
	{
		"height": 0.0
	},
	"output.stino_panel":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "ChessAI.sublime-project",
	"replace":
	{
		"height": 60.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 249.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
